<!DOCTYPE book
  PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<book>

  <bookinfo>
	<date>2007-04-28</date>
    <title>phpmailer</title>
    <subtitle>Full featured email transfer class for PHP 4</subtitle>
    <authorgroup>
      <author>
        <firstname>Brent</firstname>
        <surname>Matzelle</surname>
      </author>
      <author>
        <firstname>Patrice</firstname>
        <surname>Fournier</surname>
      </author>
      <author>
        <firstname>Tom</firstname>
        <surname>Klingenberg</surname>
      </author>
      <author>
        <firstname>Lars</firstname>
        <surname>Olesen</surname>
      </author>
    </authorgroup>
    <copyright>
      <year>2007</year>
      <holder>The authors</holder>
    </copyright>
    <legalnotice></legalnotice>
    <abstract>
      <para>
        This tutorial describes how to use PHPMailer and explains the use of the class functions.
      </para>
    </abstract>

  </bookinfo>
  <toc></toc>

  <preface id="preface">
    <title>Preface</title>
    <para>
      This tutorial describes how to use PHPMailer and explains the use of the class functions.
    </para>
  </preface>


  <chapter id="introduction">
    <title>Introduction</title>

     <section id="introduction-manchet">

      <para>
        PHPMailer is a library for <ulink url="http://www.php.net/">PHP</ulink> providing methods to send emails. The library is written for PHP4.
      </para>
    </section>
    <section id="introduction-features">
      <title>Features</title>
      <para>
        <itemizedlist>
          <listitem>
            <simpara>Can send emails with multiple TOs, CCs, BCCs and REPLY-TOs</simpara>
          </listitem>
          <listitem>
            <simpara>Redundant SMTP servers</simpara>
          </listitem>
          <listitem>
            <simpara>Multipart/alternative emails for mail clients that do not read HTML email</simpara>
          </listitem>
          <listitem>
            <simpara>Support for 8bit, base64, binary, and quoted-printable encoding</simpara>
          </listitem>
          <listitem>
            <simpara>Uses the same methods as the very popular AspEmail active server (COM) component</simpara>
          </listitem>
          <listitem>
            <simpara>SMTP authentication</simpara>
          </listitem>
          <listitem>
            <simpara>Word wrap</simpara>
          </listitem>
          <listitem>
            <simpara>Address reset functions</simpara>
          </listitem>
          <listitem>
            <simpara>HTML email</simpara>
          </listitem>
          <listitem>
            <simpara>Tested on multiple SMTP servers: Sendmail, qmail, Postfix, Imail, Exchange, etc</simpara>
          </listitem>
          <listitem>
            <simpara>Works on any platform</simpara>
          </listitem>
          <listitem>
            <simpara>Flexible debugging</simpara>
          </listitem>
          <listitem>
            <simpara>Custom mail headers</simpara>
          </listitem>
          <listitem>
            <simpara>Multiple fs, string, and binary attachments (those from database, string, etc)</simpara>
          </listitem>
          <listitem>
            <simpara>Embedded image support</simpara>
          </listitem>
        </itemizedlist>
      </para>
    </section>
  </chapter>

  <chapter id="getting-started">

    <title>Getting started</title>

    <section id="getting-started-installation">
      <title>Installation</title>
      <para>
        You can install PHPMailer using the method unzip-and-go.
      </para>
      <para>
        To unzip-and-go you have to download the source. You can find a download link from the <ulink url="http://phpmailer.sourceforge.net/">PHPMailer website</ulink>.
      </para>
      <para>
        After downloading unzip the source code into your include directory. The include directory can manually be setup using PHP's internal function <methodname>set_include_path()</methodname>. The script doesn't have to be in the <varname>include_path</varname>, but it makes it much easier to use PHPMailer in a consistent way.
      </para>
      <para>
        To make sure that everything works, try the following:
      </para>
      <para>
        <programlisting><![CDATA[
<?php
/* mail_installation_test.php */

// includes the sourcecode of the class from the include path
require 'phpmailer/class.phpmailer.php';

// creates a phpmailer object
$mail = new PHPMailer();
?>
        ]]></programlisting>
      </para>
      <para>
        Save it and try to run the script. If you don't get any errors, it means you have installed PHPMailer correctly.
      </para>
      <para>
        This small piece of code includes the necessary file and creates an instance of the phpmailer class to <varname>$mail</varname>. Now you can access all features of the class via the variable (object) <varname>$mail</varname>.
      </para>
    </section>
    <section id="getting-started-section-1">
      <para>
        Let's go ahead and send out the first mail.
      </para>
      <para>
        There are different ways to send emails using PHPMAiler. In the following example we will be using SMTP.
      </para>
     <para>
        <programlisting><![CDATA[
<?php
/* mail_send_test.php */

require 'phpmailer/class.phpmailer.php';

$mail = new PHPMailer();

// tell the server to use smtp
$mail->IsSMTP(); // telling the class to use smtp

// set up the smtp server - change to your own smtp server
$mail->Host = 'smtp.email.com';

// the address to send the e-mail from - change it to your address
// make sure that it is accepted by the smtp server
$mail->From = 'from@email.com';

// the address to send the e-mail to - change it to your test address
$mail->AddAddress('myfriend@site.com');

// You can also comment out the line above and uncomment the line below
// to get a name in the address
// $mail->AddAddress('myfriend@site.com', 'PHPMailer receiver');

// the subject of the e-mail
$mail->Subject = 'first mailing';

// the body of the e-mail
$mail->Body = "hi!\n\n this is First mailing I made myself with PHPMailer!";

// tells phpmailer to wrap every line on 50 characters
$mail->WordWrap = 50;

// attempt to send e-mail
if(!$mail->Send()) {
    echo 'Message was not sent';
    echo 'Mailer Error: ' . $mail->ErrorInfo;
} else {
    echo 'Message has been sent';
}
?>
        ]]></programlisting>
      </para>
      <para>
        Now check your mailbox to see whether you received the e-mail.
      </para>
    </section>
  </chapter>


  <chapter id="using-attachments">

    <title>Using Attachments</title>

    <section id="using-attachments-section-1">

      <para>
        There are two ways to attach files to your e-mail. First, you can simply attach a file from the filesystem (remote won't work). Second, you can attach (binary) data stored in a string variable.
      </para>

    </section>

    <section id="using-attachments-files">

      <title>File Attachments</title>

      <para>
        To attach a file, just use <methodname>AddAttachment($path, $name, $encoding, $type)</methodname> method. The first parameter, the <varname>$path</varname> to the file you wish to enclose as an attachment. <varname>$path</varname> can be a relative from your script to the file, or full absolute path to the file.
      </para>

      <para>
        All other parameters are optional, but can be be used to tell more about the file.
      </para>

      <para>
        <varname>$name</varname> is an optional parameter for you to set the filename which will occur in the mail you'll send out. The person who will recieve your mail will then only see this name instead of the original filename.
      </para>

      <para>
        <varname>$encoding</varname> is a little more technical, with this parameter you can set the type of encoding of the attachment. Default is base64. Other types that are supported are: 7bit, 8bit, binary &amp; quoted-printable. Please refer to your smtp documentation about encoding and the differences between types. In general, mailservers will convert encodings they don't want to handle into their preferred encoding type.
      </para>

      <para>
        <varname>$type</varname> is the mime-type of your attached file. In internet you don't specify the filetype with an ending dot and suffix, a so called mime-type (MIME = Multipurpose Internet Mail Extensions) is used. This parameter gives you the possibility to change it from the default value of application/octet-stream (which works with every kind of file) to a more specific mime type like image/jpeg for a .jpg-photo for example.
      </para>

    </section>

    <section id="using-attachments-strings">

      <title>String Attachments</title>

      <para>
        To attach a string, use <methodname>AddStringAttachment($string, $filename, $encoding, $type)</methodname>. You have to pass your <varname>$string</varname> data to the method as the first parameter. The string will be copied to a file, so you also have to supply the second parameter <varname>$filename</varname>. The rest of the parameters are optional.
      </para>

      <para>
        When would it be necessary to add a string, and not just a file? For instance with databases. Data stored in a database is always stored as a string (often called blob). You can for example query your database and pass the returned string to the <methodname>AddStringAttachment()</methodname> method, and it will be enclosed automatically as a file.
      </para>

    </section>

    <section id="using-attachments-inline">
      <title>Inline Attachments</title>

      <para>
        There is an additional way to add an attachment. If you want to make a HTML-message with images, you have to make an attachment of the image and then link the <![CDATA[<img src="cid:CID" />]]> tag to it. This is done with a so called CID. For example, you add an image as inline attachment with the CID my-photo, you access it within the HTML-mail Part with <![CDATA[<img src="cid:my-photo" alt="my photo" />]]>.
      </para>

      <para>
        Use the method <methodname>$mail->AddEmbeddedImage($filename, $cid, $name)</methodname> to attach inline attachments. For instance:
      </para>

      <para><programlisting><![CDATA[
$mail->AddEmbeddedImage('my-photo.jpg', 'my-photo', 'my-photo.jpg '));
      ]]></programlisting>
      </para>

      <para>
        For more Information about HTML-Mails, see the Chapter Using HTML Mail.
      </para>

    </section>

    <section id="handling-attachments">
      <title>Handling Attachments</title>
      <para>
        If you want to attach multiple files (or strings), just call <methodname>AddAttachment()</methodname> or <methodname>AddStringAttachment()</methodname> multiple times. If you want to remove an attachment, you can't specify a single one, but you can remove all attachments from your mail by calling <methodname>ClearAttachments()</methodname>. This will remove all attachments, this means all file-, string-, and inline-attachments.
      </para>
    </section>

  </chapter>

  <chapter id="using-html-mail">
    <title>Using HTML Mail</title>

    <section id="using-html-mail-section-1">
      <para>
        If you want to use HTML in your e-mails, this can be done with
      </para>
      <para>
        But sending out HTML-Messages depends not only on your knowledge in HTML, it also depends on the receiving person's email client, which should be compatible with these HTML-mails. For those mailclients which are not able to display HTML formattings, you can use an alternative (old+ alternate ??) body containing your message as plain text.
      </para>

      <para>
        Let's take a look what to do. First we'll simply create a basic HTML message:
      </para>

      <para>
        <programlisting><![CDATA[
<?php
require 'phpmailer/class.phpmailer.php';

$mail = new PHPMailer();
$mail->IsSMTP();
$mail->Host = 'smtp.email.com';
$mail->From = 'from@email.com';
$mail->AddAddress('myfriend@site.com');

$mail->Subject = 'look, it's a HTML message';
$mail->Body = "hi <b>my friend</b>!\n\nthis message uses html entities!";

// tell mailer that it is a html-mail
$mail->isHTML();

// provide an alternative body for e-mail clients
// which cannot handle HTML

$mail->altBody = "hi my friend!\n\nthis message uses html entities, but you prefer plain text!";

$mail->Send();
?>
        ]]></programlisting>
      </para>

      <para>
        It's just as easy as making a normal mail. You just take a string with HTML formattings as <varname>$mail->body</varname>.
Before sending this out, we have to tell the PHPMailer object, that we want to use a HTML message. In detail this means, the body has to be setup as multipart/alternative. The is done with:
<methodname>$mail->IsHTML(true)</methodname>;
      </para>

      <para>
        To make the HTML-message perfect then, you can use <varname>$mail->AltBody = "hi my friend!\n\nthis message uses html entities, but you prefer plain text!"</varname> to set the alternative body. If you use this feature, the mail will be automatically set as multipart/alternative and you do not need really need to use <methodname>$mail->IsHTML(true)</methodname> any more, even though we did it in the example for clarity.
      </para>

      <para>
        We would not recommend using HTML messages, because these messages are often used for viruses and exploits, they are bigger than simple plain-text mails and are not standarized in the way the plain-text mail is. On the other hand, even attachments are used for viruses, but nobody would stop sending mails with attachments. It's just your decision and PHPMailer is able to be a solution for both, Emails with HTML or without.
      </para>

      <para>
        If you want to send out a HTML-message with pictures, or even flash animations or whatever, PHPMailer supports this as well. Adding a picture to your HTML-message for example is explained in the Chapter Inline Attachments in detail and should lead you to your 'I am a superb HTML-Message-Designer' pleasure. For short, here are 2 lines of Code you've to insert before sending the mail out:
      </para>

      <para>
        <programlisting><![CDATA[
<?php
$mail->AddEmbeddedImage('rocks.png', 'my-attach', 'rocks.png');
$mail->Body = 'Embedded Image: <img alt="PHPMailer" src="cid:my-attach"> Here is an image!';
?>
      ]]></programlisting></para>
    </section>
  </chapter>

  <chapter id="extending">

    <title>Extending</title>

    <section id="advanced-example">
      <title>Advanced example</title>
      <para>
        This demonstrates sending out multiple email messages with binary attachments from a MySQL database with multipart/alternative support.
      </para>
      <para>
        <programlisting><![CDATA[
<?php
require 'phpmailer/class.phpmailer.php';

$mail = new phpmailer();

$mail->From     = 'list@example.com';
$mail->FromName = 'List manager';
$mail->Host     = 'smtp1.example.com;smtp2.example.com';
$mail->Mailer   = 'smtp';

$recipients = array(
  array(
    'full_name' => 'Patrice Fournier',
    'email'     => 'test@email.com',
    'photo'     => 'patrice.jpg'
  ),
  array(
    'full_name' => 'Brent Matzelle',
    'email'     => 'test@email.com',
    'photo'     => 'brent.jpg'
  )
);

foreach($recipients AS $row) {
    // HTML body
    $body  = 'Hello <font size="4">' . $row['full_name'] . '</font>,';
    $body .= '<p>Your personal photograph to this message</p>';
    $body .= 'Sincerely,<br>';
    $body .= 'phpmailer List manager';

    // Plain text body (for mail clients that cannot read HTML)
    $text_body  = "Hello " . $row["full_name"] . ", \n\n";
    $text_body .= "Your personal photograph to this message.\n\n";
    $text_body .= "Sincerely, \n";
    $text_body .= "phpmailer List manager";

    $mail->Body    = $body;
    $mail->AltBody = $text_body;
    $mail->AddAddress($row['email'], $row['full_name']);
    $mail->AddStringAttachment($row['photo'], 'YourPhoto.jpg');

    if(!$mail->Send())
        echo 'There has been a mail error sending to ' . $row['email'] . '<br>';

    // Clear all addresses and attachments for next loop
    $mail->ClearAddresses();
    $mail->ClearAttachments();
}
      ]]></programlisting>
    </para>
    </section>

    <section id="extending-phpmailer">
      <title>Extending phpmailer</title>
      <para>
        Extending classes with inheritance is one of the most powerful features of object-oriented programming.  It allows you to make changes to the original class for your own personal use without hacking the original classes.  Plus, it is very easy to do. I've provided an example:
      </para>
      <para>
        Here's a class that extends the phpmailer class and sets the defaults for the particular site:
      </para>
      <para>
         <programlisting><![CDATA[
<?php
/* MyPHPMailer.php */

require 'phpmailer/class.phpmailer.php';

class my_phpmailer extends phpmailer {
    // Set default variables for all new objects
    var $From     = 'from@example.com';
    var $FromName = 'Mailer';
    var $Host     = 'smtp1.example.com;smtp2.example.com';
    var $Mailer   = 'smtp'; // Alternative to IsSMTP()
    var $WordWrap = 75;

    // Replace the default error_handler
    function error_handler($msg) {
        print('My Site Error');
        print('Description:');
        printf("%s", $msg);
        exit;
    }

    // Create an additional function
    function do_something($something) {
        // Place your new code here
    }
}
        ]]></programlisting>
      </para>
      <para>
        Now here's a normal PHP page in the site, which will have all the defaults set above:
      </para>
      <para>
        <programlisting><![CDATA[
<?php
require 'MyPHPMailer.php';

// Instantiate your new class
$mail = new my_phpmailer;

// Now you only need to add the necessary stuff
$mail->AddAddress('josh@example.com', 'Josh Adams');
$mail->Subject = 'Here is the subject';
$mail->Body    = 'This is the message body';
$mail->AddAttachment('c:/temp/11-10-00.zip', 'new_name.zip');  // optional name

if(!$mail->Send()) {
   echo 'There was an error sending the message';
   exit;
}

echo 'Message was sent successfully';

        ]]></programlisting>
      </para>
    </section>
  </chapter>

  <chapter id="faq">
    <title>Frequently asked questions</title>

    <section id="faq-1">
      <title>I am getting a "SMTP Error: The following recipients failed [myemail@mydomain]"</title>
      <para>
        This error usually occurs because relaying is not allowed on the SMTP server from the IP address of the web server. Go to the configuration of your SMTP server and turn relaying on for your IP address and try again.
      </para>
    </section>

    <section id="faq-2">
      <title>I'm using the SMTP mailer and I keep on getting a timeout message well before the X seconds I set it for. What gives?</title>
      <para>
        PHP versions 4.0.4pl1 and earlier have a bug in which sockets timeout early. You can fix this by re-compiling PHP 4.0.4pl1 with this fix: timeoutfix.diff. Otherwise you can wait for the new PHP release.
      </para>
    </section>

    <section id="faq-3">
      <title>I am concerned that using include files will take up too much processing time on my computer. How can I make it run faster?</title>
      <para>
        PHP by itself is very fast. Much faster than ASP or JSP running on the same type of server. This is because it has very little overhead compared to its competitors and it pre-compiles all of its code before it runs each script (in PHP4). However, all of this compiling and re-compiling can take up a lot of valuable computer resources. However, there are programs out there that compile PHP code and store it in memory (or on mmaped files) to reduce the processing immensely. Two of these: APC (Alternative PHP Cache), Afterburner (Win32 download), and PHP Accelerator are excellent free tools that do just this. If you have the money you might also try Zend Cache, it is even faster than most open source varieties. All of these tools make your scripts run faster while also reducing the load on your server. I have tried them myself and they are quite stable too.
      </para>
    </section>

    <section id="faq-4">
      <title>What mailer gives me the best performance?</title>
      <para>
        When you use the "mail" or "sendmail" methods PHPMailer will complete the sending faster because it can skip the entire SMTP phase. However, it is recommended that you send your mail using "smtp" because it gives you the flexibility to designate as many SMTP servers you wish. This allows you to spread the sending load over several computers giving a much higher overall performance.
      </para>
      <para>
        When I try to attach a file with on my server I get a "Could not find {file} on filesystem error". Why is this?
      </para>
      <para>
        If you are using a Unix machine this is probably because the user running your web server does not have read access to the directory in question. If you are using Windows, then the problem probably is that you have used single backslashes to denote directories ("\"). A single backslash has a special meaning to PHP so these are not valid. Instead use double backslashes ("\\") or a single forward slash ("/").
      </para>

    </section>

    <section id="faq-5">
      <title>How do I submit a bug report?</title>
      <para>
        Because PHPMailer is platform/mail server independent and has so many configuration options it is important to provide details about your particular setup. This will make the diagnosis of the problem much easier for those involved. Here is a checklist of some of the information to provide:
      </para>
      <para>
        <itemizedlist>
          <listitem>
            <simpara>Operating system (Linux, win32, OS X)</simpara>
          </listitem>
          <listitem>
            <simpara>Mail server (Postfix, Sendmail, MS Exchange)</simpara>
          </listitem>
          <listitem>
            <simpara>PHPMailer configuration (Mailer type, using SMTP?, etc)</simpara>
          </listitem>
        </itemizedlist>
      </para>
    </section>
  </chapter>

  <chapter id="support">
    <title>Support - Where do I get help?</title>

    <section id="support-section">
      <para>
        As said above, PHPMailer is open source and published under gpl. I think most of the questions how to start are answered in this Tutorial, but maybe more difficult/different questions and topics this document could not deal with are unanswered and you might want to get help directly from the developer or the supporting community. For this, PHPMailer has it's own homepage on sourceforge (where you'll get the latest version for example) and a mailing list where you can post your questions.
      </para>
      <para>
      <itemizedlist>
        <listitem>
          <simpara>PHPMailer Homepage: http://phpmailer.sourceforge.net/</simpara>
        </listitem>
        <listitem>
          <simpara>PHPMailer Mailing list: http://lists.sourceforge.net/lists/listinfo/phpmailer-general</simpara>
        </listitem>
        <listitem>
          <simpara>PHPMailer Documentation: http://phpmailer.sourceforge.net/phpdoc/phpmailer.html</simpara>
        </listitem>
      </itemizedlist>
      </para>
    </section>
  </chapter>

  <chapter id="other-ressources">
    <title>Other Resources to Email and PHP</title>

    <section id="other-1">
      <para>
        There is a lot of information in the net about email, php and PHPMailer:
      </para>

      <para>
      <itemizedlist>
        <listitem>
          <simpara>PHPMailer Homepage: http://phpmailer.sourceforge.net/</simpara>
        </listitem>
        <listitem>
          <simpara>php mail() function reference: http://www.php.net/mail</simpara>
        </listitem>
        <listitem>
          <simpara>Standard Email RFC 822: http://www.w3.org/Protocols/rfc822/</simpara>
        </listitem>
        <listitem>
          <simpara>MIME Email RFC 2046: http://www.ietf.org/rfc/rfc2046.txt</simpara>
        </listitem>
      </itemizedlist>
      </para>
    </section>

  </chapter>

</book>